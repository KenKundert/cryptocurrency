#!/usr/bin/env python3
'''Cryptocurrency

Displays updated summary of cryptocurrency portfolio.

usage:
    cryptocurrency [options] [<accounts>...]

options:
    -a, --all                        show all tokens
    -C <dir>, --config-dir <dir>     directory that holds transactions file
    -c, --cost                       show cost
    -p <tokens>, --prices <tokens>   show prices rather than portfolio;
                                     <tokens> is a comma separated list of token
                                     names, or all to show all known tokens.
    -T, --transactions               show transactions with portfolio
    -t, --tokens                     show number of tokens held
    -f, --fixed                      show dollar amounts in dollars and cents
    -i, --insecure                   do not check certificate of prices website
    -P, --proxy                      connect to the internet through a proxy
    -C <filename>, --csv <filename>  generate csv file of transactions
    --start <start-date>             ignore transactions before this date, YYMMDD
    --stop <stop-date>               ignore transactions after this date, YYMMDD

You can also override the current price of cryptocurrencies to examine what-if 
scenarios.  Any account specified that contains an '=' is taken to be an 
override, and must be specified as a name=value pair, where name is the name of 
the currency and value is its value in US dollars.  For example:

    cryptocurrency BTC=100k
'''

import requests
from inform import (
    Error, Color, cull, display, done, error, fatal, is_str, join, os_error,
    render_bar, warn,
)
from textwrap import dedent
from quantiphy import Quantity, UnitConversion, UnknownConversion
from cryptocurrency import Currency, accounts
from appdirs import user_config_dir
from shlib import to_path
from docopt import docopt
import arrow

TRANSACTIONS_FILENAMES = 'transactions.gpg transactions'
Quantity.set_prefs(prec=2, map_sf=Quantity.map_sf_to_greek)
credit_color = Color('green', enable=Color.isTTY())
debit_color = Color('red', enable=Color.isTTY())
num_toks_color = Color('cyan', enable=Color.isTTY())
total_color = Color('magenta', enable=Color.isTTY())
price_color = Color('green', enable=Color.isTTY())
share_color = Color('yellow', enable=Color.isTTY())
bar_color = Color('blue', enable=Color.isTTY())
proxies = dict(
    # The local socks5 proxy on port 9998.
    # Use this at companies that block access to cryptocompare.
    http='socks5://localhost:9998',
    https='socks5://localhost:9998',
)
reference_currencies = 'BTC EOS ETH USD'.split()
min_value = 0.001  # relative to total

class Dollar(Quantity):
    units = '$'

# read the command line
cmdline = docopt(__doc__)
desired_accounts = cmdline['<accounts>']
show_transactions = cmdline['--transactions']
show_tokens = cmdline['--tokens']
show_prices =  cmdline['--prices']
show_cost =  cmdline['--cost']
show_all = cmdline['--all']
start_date = cmdline['--start']
stop_date = cmdline['--stop']
ignore_before = arrow.get(start_date if start_date else '090103', 'YYMMDD')
ignore_after = arrow.get(stop_date, 'YYMMDD') if stop_date else arrow.now()
if show_all:
    min_value = 0
insecure = cmdline['--insecure']
if insecure:
    requests.packages.urllib3.disable_warnings()
use_proxy = cmdline['--proxy']
if not use_proxy:
    proxies = None
if cmdline['--fixed']:
    Dollar.set_prefs(form='fixed', show_commas=True, strip_zeros=False, prec=2)
    Quantity.set_prefs(form='fixed', show_commas=True, strip_zeros=True, prec=8)
else:
    Dollar.set_prefs(form='si')

# find the transactions file
if not show_prices:
    settings_dir = cmdline['--config-dir']
    if not settings_dir:
        settings_dir = user_config_dir('cryptocurrency')
    for filename in TRANSACTIONS_FILENAMES.split():
        transactions_filepath = to_path(settings_dir, filename)
        if transactions_filepath.exists():
            break
    else:
        #fatal('transactions file not found in:', settings_dir)
        show_prices = True
    try:
        from avendesora.gpg import PythonFile
    except ImportError:
        show_prices = True

# download latest asset prices from cryptocompare.com
currencies = dict(
    fsyms=','.join(Currency.units()),      # from symbols
    tsyms=','.join(reference_currencies),  # to symbols
)
url_args = '&'.join(f'{k}={v}' for k, v in currencies.items())
base_url = f'https://min-api.cryptocompare.com/data/pricemulti'
url = '?'.join([base_url, url_args])
try:
    r = requests.get(url, proxies=proxies, verify=not insecure)
except KeyboardInterrupt:
    done()
except Exception as e:
    # must catch all exceptions as requests.get() can generate a variety based 
    # on how it fails, and if the exception is not caught the thread dies and 
    # the prices mysteriously stop updating.
    if 'certificate verify failed' in str(e):
        fatal('certificate verify failed for', base_url)
    fatal('cannot access cryptocurrency prices:', codicil=str(e))

try:
    data = r.json()
except:
    try:
        to_path('error.html').write_text(r.text)
    except:
        fatal('cryptocurrency price download was garbled.')
    fatal('cryptocurrency price download was garbled (look in ./error.html for response).')


# Create unit conversions
for each in Currency.__subclasses__():
    for ref in reference_currencies:
        currency = Currency.currency(ref)
        each.converter(cull([currency.SYMBOL, currency.UNITS]), data)

# get current time
now = arrow.now().format('h:mm A, dddd MMMM D')

if show_prices:
    display(f'Prices as of {now}:')
    if is_str(show_prices):
        show_prices = show_prices.upper().split(',')
        if 'ALL' in show_prices:
            show_prices = True
    for c in Currency.currencies():
        if show_prices is True or c.UNITS in show_prices:
            try:
                display(f'    {c.one:<7s} = {c.one:<7q$} {c.one:<7qɃ} {c.one:<7qΞ} {c.one:qȄ}')
            except UnknownConversion:
                pass
    done()

# read the transactions
try:
    transactions = PythonFile(transactions_filepath)
    transactions.initialize()
    transactions.run()
    # running the transactions file causes accounts to be set as a side effect
except Error as e:
    e.terminate()

# process the specified accounts, some of which may actually be overrides
overrides = [n for n in desired_accounts if '=' in n]
desired_accounts = [n for n in desired_accounts if '=' not in n]
if not desired_accounts:
    desired_accounts = [n for n in accounts.keys() if accounts[n].default]

# implement price overrides
for override in overrides:
    try:
        n, v = override.split('=')
        c = Currency.currency(n)
        was = f'rather than {c.one:q$}' if c else '(not found)'
        v = Dollar(v)
        UnitConversion(('USD', v.units), n, slope=v)
        display(f'Override: {n} = {v:q$} {was}.')
    except (KeyError, ValueError):
        fatal('garbled override, expected name=value.', culprit=override)
if overrides:
    display()

holdings = []
for name in desired_accounts:
    try:
        acct = accounts[name]
    except KeyError:
        error('unknown account.', culprit=name)
        continue

    if cmdline['--csv']:
        acct.gen_csv(cmdline['--csv'])

    if show_transactions:
        # first compute cost basis for all transactions
        for t in acct.transactions.values():
            try:
                t.compute_cost_basis()
            except Error as e:
                e.terminate()

        display()
        display(f"{name.title()}'s Transactions:")
        unreported = {}
        costs = {}
        for t in acct.transactions.values():
            try:
                date = arrow.get(t.date[:6], 'YYMMDD')
            except TypeError:
                continue
            if date < ignore_before or date > ignore_after:
                continue
            price = t.tokens.price
            value = f'{t.tokens} @ {price}' if price else str(t.tokens)
            if value[0] == '-':
                value = value[1:]
                ttype = 'sale'
                color = debit_color
            else:
                ttype = 'purchase'
                color = credit_color
            cost = t.proceeds if t.proceeds else t.tokens.in_dollars()
            cost = f'({cost})' if cost else None
            comment = f'-- {t.comment}' if t.comment else None
            prefix = '    ' + ' '.join(cull([t.date, ttype])) + ':'
            display(color(*cull([prefix, value, cost, comment])))
            #if True or t.tokens_reported:
            #    display(
            #        '       ',
            #        f'reported={t.reported()}, remaining={t.remaining()}'
            #    )
            #    if ttype == 'debit':
            #        warn('tokens reported on debit.', culprit=t)
            #    elif t.tokens.price == 0:
            #        warn('tokens reported on credit with no price.', culprit=t)
            if t.tokens.in_tokens() >= 0:
                remaining = t.tokens_remaining()
                cost = getattr(t, 'cost_basis', None)
                if remaining > 0.001:
                    display(
                        remaining, cost,
                        template = (
                            '        still unreported = {} (cost = {}).',
                            '        still unreported = {}.',
                        ),
                        remove = None
                    )
                    unreported[remaining.units] = remaining.add(unreported.get(remaining.units, 0))
                    if cost:
                        costs[remaining.units] = cost.add(costs.get(remaining.units, 0))
            if hasattr(t, 'profit'):
                display(
                    f'        proceeds = {t.proceeds.fixed(scale=-1)}',
                    f'cost basis = {t.cost_basis}',
                    f'profit = {t.profit}',
                    sep=', '
                )
        display()
        display('Unreported:')
        for k in sorted(unreported):
            display(k, unreported[k], costs.get(k), template=(
                '    {:<5} : {:p} {:#,.2p}', '    {:<5} : {:p}',
            ), remove=None)
        display()

    if show_tokens:
        display(f"{name.title()}'s tokens as of {now}:")
        for k in sorted(acct.totals):
            display(f'    {acct.totals[k]:.4P}')
        display()

    title = f"{name.title()}'s holdings as of {now}:"
    coins = {}
    total = Dollar(acct.total_value())
    largest_share = acct.largest_share()
    for currency in Currency.currencies():
        name = currency.__name__
        symbol = currency.UNITS
        if name in acct.totals:
            tokens = acct.totals[name]
            try:
                value = tokens.scale('$', cls=Dollar)
                if value <= min_value*total:
                    continue
            except UnknownConversion as e:
                warn(e)
                continue
            tokens = tokens.scale(symbol)
            share = value / total
            price = Quantity(1, symbol).scale('$', cls=Dollar)
            t = num_toks_color(f'{tokens:>11q}')
            v = total_color(f'{value:<6}')
            p = f'{price}/{symbol}'
            p = price_color(f'{p:<13}')
            s = share_color(f'{share:5.1%}')
            if show_cost:
                if name in acct.purchased:
                    cost = acct.costs[name]
                    purchased = acct.purchased[name]
                    avg_cost = Dollar(cost/purchased)
                    extra = '{:32s}'.format(f'cost={avg_cost} each for {purchased}')
                    if avg_cost:
                        gain = (price - avg_cost)/avg_cost
                        extra += f' gain={gain:.0%}'
                else:
                    extra = ''
                row = f"    {t} = {v} @ {p} {s}  {extra}"
            else:
                bar = render_bar(value/largest_share, 45)
                row = f"    {t} = {v} @ {p} {s}  {bar_color(bar)}"
            coins[value] = row.rstrip()
        else:
            if name != 'USD':
                #warn('missing:', name)
                pass

    cost = Dollar(acct.total_cost())
    if cost:
        delta = Dollar(total-cost)
        gain = (total-cost)/cost
        combined = f'          Total = {total:<7}  {delta} ({gain:.0%}) gain on {cost} investment'
    else:
        combined = f'          Total = {total}'
    summary = (
        [title] +
        [coins[v] for v in sorted(coins, reverse=True)] +
        [combined]
    )
    holdings.append(join(*summary, sep='\n'))

display(*holdings, sep='\n\n')

# try:
#     from networth import total as non_crypto_total
#     networth = Dollar(total + non_crypto_total)
#     fraction = total / networth
#     display(f'    Net Worth = {networth}  {fraction:.1%}')
# except ImportError:
#     error('Could not access networth.')
#     pass
