#!/usr/bin/env python3
'''Cryptocurrency

Displays updated summary of cryptocurrency portfolio.

usage:
    cryptocurrency [options] [<accounts>...]

options:
    -p, --prices         show prices
    -t, --transactions   show transactions
'''

import requests
from inform import Color, cull, display, fatal, terminate
from textwrap import dedent
from quantiphy import Quantity, UnitConversion
from avendesora.gpg import PythonFile
from cryptocurrency import Currency, BTC, ETH, BCH, ZEC, EOS, accounts
from appdirs import user_config_dir
from shlib import to_path
from docopt import docopt

TRANSACTIONS_FILENAMES = 'transactions.gpg transactions'
Quantity.set_prefs(prec=2)
credit = Color('green')
debit = Color('red')

# read the command line
cmdline = docopt(__doc__)
desired_accounts = cmdline['<accounts>']
show_transactions = cmdline['--transactions']

# Read the transactions
settings_dir = user_config_dir('cryptocurrency')
for filename in TRANSACTIONS_FILENAMES.split():
    transactions_filepath = to_path(settings_dir, filename)
    if transactions_filepath.exists():
        break
else:
    fatal('transactions file not found in:', settings_dir)
transactions = PythonFile(transactions_filepath)
transactions.initialize()
transactions.run()
    # running the transactions file causes accounts to be set as a side effect

proxies = {
    # I cannot get the socks proxy to work
    'http': 'socks5://127.0.0.1:9999',
    'https': 'socks5:/127.0.0.1:9999'
}
proxies = None

# download latest asset prices from cryptocompare.com
currencies = dict(
    fsyms=','.join(Currency.names()),  # from symbols
    tsyms='BTC,ETH,USD',               # to symbols
)
url_args = '&'.join(f'{k}={v}' for k, v in currencies.items())
base_url = f'https://min-api.cryptocompare.com/data/pricemulti'
url = '?'.join([base_url, url_args])
try:
    r = requests.get(url, proxies=proxies)
except Exception as e:
    # must catch all exceptions as requests.get() can generate a variety based 
    # on how it fails, and if the exception is not caught the thread dies and 
    # the prices mysteriously stop updating.
    pass
    fatal('cannot access cryptocurrency prices:', str(e))
except KeyboardInterrupt:
    terminate()

data = r.json()

# Create unit conversions
BTC.converter(('$', 'USD'), data)
BTC.converter(('Ξ', 'ETH'), data)
ETH.converter(('$', 'USD'), data)
BCH.converter(('$', 'USD'), data)
ZEC.converter(('$', 'USD'), data)
EOS.converter(('$', 'USD'), data)

if cmdline['--prices']:
    display(dedent(f'''
        Current Prices:
                1 BTC = {BTC.one:q$} or {BTC.one:7qΞ}
                1 ETH = {ETH.one:q$} or {ETH.one:7qɃ}
                1 BCH = {BCH.one:q$}
                1 ZEC = {ZEC.one:q$}
                1 EOS = {EOS.one:q$}
    ''').strip())

if not desired_accounts:
    desired_accounts = [n for n in accounts.keys() if accounts[n].default]
for name in desired_accounts:
    acct = accounts[name]
    if show_transactions:
        display()
        display(f"{name.title()}'s Transactions:")
        for t in acct.transactions:
            price = t.tokens.price
            value = f'{t.tokens} @ {price}' if price else str(t.tokens)
            if value[0] == '-':
                value = value[1:]
                ttype = 'debit'
                color = debit
            else:
                ttype = 'credit'
                color = credit
            cost = t.cost if t.cost else t.tokens.in_dollars()
            cost = f'({cost})' if cost else None
            comment = f'-- {t.comment}' if t.comment else None
            prefix = '    ' + ' '.join(cull([t.date, ttype])) + ':'
            display(color(*cull([prefix, value, cost, comment])))

    display()
    display(f"{name.title()}'s Holdings:")
    for symbol in Currency.names():
        if symbol in acct.totals:
            tokens = acct.totals[symbol]
            value = tokens.scale('$')
            tokens = tokens.scale(symbol)
            percentage = 100 * value / acct.total_value()
            row = f'{tokens:>9q} = {value:<7q} {percentage:.0f}%'
            if symbol in acct.costs:
                cost = acct.costs[symbol]
                avg_cost = Quantity(cost/tokens, '$')
                price = Quantity(1, symbol).scale('$')
                extra = [f'average cost = {avg_cost}']
                if avg_cost:
                    gain = 100*(price - avg_cost)/avg_cost
                    extra += [f'gain = {gain:.0f}%']
            display(f"    {row:25s}    {', '.join(extra)}")
    total = acct.total_value()
    cost = acct.total_cost()
    if cost:
        gain = 100*(total-cost)/cost
        display(f'        Total = {total:<15}  {gain:.0f}% gain on {cost} investment')
    else:
        display(f'        Total = {total}')
