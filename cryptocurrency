#!/usr/bin/env python3
'''Cryptocurrency

Displays updated summary of cryptocurrency portfolio.

usage:
    cryptocurrency [options] [<accounts>...]

options:
    -c <dir>, --config-dir  <dir>    directory that holds transactions file
    -p, --prices                     show prices rather than portfolio
    -t, --transactions               show transactions with portfolio

You can also override the current price of cryptocurrencies to examine what-if 
scenarios.  Any account specified that contains an '=' is taken to be an 
override, and must be specified as a name=value pair, where name is the name of 
the currency and value is its value in US dollars.  For example:

    cryptocurrency BTC=100k
'''

import requests
from inform import Color, cull, display, done, error, fatal, join
from textwrap import dedent
from quantiphy import Quantity, UnitConversion
from cryptocurrency import (
    Currency, accounts
)
from appdirs import user_config_dir
from shlib import to_path
from docopt import docopt
import arrow

TRANSACTIONS_FILENAMES = 'transactions.gpg transactions'
Quantity.set_prefs(prec=2, map_sf=Quantity.map_sf_to_greek)
credit = Color('green')
debit = Color('red')

# read the command line
cmdline = docopt(__doc__)
desired_accounts = cmdline['<accounts>']
show_transactions = cmdline['--transactions']
show_prices =  cmdline['--prices']

# find the transactions file
if not show_prices:
    settings_dir = cmdline['--config-dir']
    if not settings_dir:
        settings_dir = user_config_dir('cryptocurrency')
    for filename in TRANSACTIONS_FILENAMES.split():
        transactions_filepath = to_path(settings_dir, filename)
        if transactions_filepath.exists():
            break
    else:
        #fatal('transactions file not found in:', settings_dir)
        show_prices = True
    try:
        from avendesora.gpg import PythonFile
    except ImportError:
        show_prices = True

# download latest asset prices from cryptocompare.com
proxies = None
currencies = dict(
    fsyms=','.join(Currency.names()),  # from symbols
    tsyms='BTC,ETH,USD',               # to symbols
)
url_args = '&'.join(f'{k}={v}' for k, v in currencies.items())
base_url = f'https://min-api.cryptocompare.com/data/pricemulti'
url = '?'.join([base_url, url_args])
try:
    r = requests.get(url, proxies=proxies)
except Exception as e:
    # must catch all exceptions as requests.get() can generate a variety based 
    # on how it fails, and if the exception is not caught the thread dies and 
    # the prices mysteriously stop updating.
    pass
    fatal('cannot access cryptocurrency prices:', str(e))
except KeyboardInterrupt:
    done()

try:
    data = r.json()
except:
    fatal('cryptocurrency price download was garbled.')

# Create unit conversions
for each in Currency.__subclasses__():
    each.converter(('$', 'USD'), data)
    each.converter(('Ƀ', 'BTC'), data)
    each.converter(('Ξ', 'ETH'), data)

# get current time
now = arrow.now().format('h:mm A, dddd MMMM D')

if show_prices:
    display(f'Prices as of {now}:')
    for c in Currency.currencies():
        display(f'    {c.one} = {c.one:<7q$} {c.one:<7qɃ} {c.one:qΞ}')
    done()

# read the transactions
try:
    transactions = PythonFile(transactions_filepath)
except Error as e:
    e.terminate()
transactions.initialize()
transactions.run()
    # running the transactions file causes accounts to be set as a side effect

# process the specified accounts, some of which may actually be overrides
overrides = [n for n in desired_accounts if '=' in n]
desired_accounts = [n for n in desired_accounts if '=' not in n]
if not desired_accounts:
    desired_accounts = [n for n in accounts.keys() if accounts[n].default]

# implement price overrides
for override in overrides:
    try:
        n, v = override.split('=')
        v = Quantity(v, '$')
        display(f'Override: {n} = {v:q$}')
    except ValueError:
        fatal('garbled override, expected name=value.', culprit=override)
if overrides:
    display()

holdings = []
for name in desired_accounts:
    try:
        acct = accounts[name]
    except KeyError:
        error('unknown account.', culprit=name)
        continue
    if show_transactions:
        display()
        display(f"{name.title()}'s Transactions:")
        for t in acct.transactions:
            price = t.tokens.price
            value = f'{t.tokens} @ {price}' if price else str(t.tokens)
            if value[0] == '-':
                value = value[1:]
                ttype = 'debit'
                color = debit
            else:
                ttype = 'credit'
                color = credit
            cost = t.cost if t.cost else t.tokens.in_dollars()
            cost = f'({cost})' if cost else None
            comment = f'-- {t.comment}' if t.comment else None
            prefix = '    ' + ' '.join(cull([t.date, ttype])) + ':'
            display(color(*cull([prefix, value, cost, comment])))

    lines = [f"{name.title()}'s holdings as of {now}:"]
    for symbol in Currency.names():
        if symbol in acct.totals:
            tokens = acct.totals[symbol]
            value = tokens.scale('$')
            tokens = tokens.scale(symbol)
            share = value / acct.total_value()
            row = f'{tokens:>9q} = {value:<7q} {share:.0%}'
            price = Quantity(1, symbol).scale('$')
            extra = ['{:23s}'.format(f'price={price} per {symbol}')]
            if symbol in acct.purchased:
                cost = acct.costs[symbol]
                purchased = acct.purchased[symbol]
                avg_cost = Quantity(cost/purchased, '$')
                extra += ['{:27s}'.format(f'cost={avg_cost} for {purchased}')]
                if avg_cost:
                    gain = (price - avg_cost)/avg_cost
                    extra += [f'gain={gain:.0%}']
            lines.append(f"    {row:25s}  {' '.join(extra)}".rstrip())

    total = acct.total_value()
    cost = acct.total_cost()
    if cost:
        delta = Quantity(total-cost, '$')
        gain = (total-cost)/cost
        lines.append(
            f'        Total = {total:<13}  {gain:.0%} ({delta}) gain on {cost} investment'
        )
    else:
        lines.append(f'        Total = {total}')
    holdings.append(join(*lines, sep='\n'))

display(*holdings, sep='\n\n')

#try:
#    from networth import total as non_crypto_total
#    networth = Quantity(total + non_crypto_total, '$')
#    percentage = total / networth
#    display(f'    Net Worth = {networth}  {percentage:.1%}')
#except ImportError:
#    pass
