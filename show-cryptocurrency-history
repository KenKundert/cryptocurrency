#!/usr/bin/env python3
# Usage {{{1
"""
Show Cryptocurrency History

usage:
    get-cryptocurrency-data [options] [<request>]

options:
    -y, --year       only show the most recent year
    -q, --quarter    only show the most recent quarter
    -m, --month      only show the most recent month
    -n, --normalize  show normalized to latest value
    -r, --regress    show trend
    -t <tokens>, --tokens <tokens>
                     only show these tokens (comma separated list)

Where <request> is one of cap, volume, open, close, high, low, holdings.
If not given, the market cap is shown.

Holdings can be a bit misleading. It is the historical price multiplied by the 
current holdings.
"""
# Currently I download the complete history every time I run. Consider caching 
# the downloaded data into a local database, and then only download the new 
# values. In the short term, I could simply cache the data for a day.

# Holdings simply multiplies the historical price by the current holdings. It 
# would be much better if I could multiply it by the historical holdings.

# Imports {{{1
from pathlib import Path
from inform import Inform, Error, display, done, error, narrate, os_error, render
from quantiphy import Quantity
Quantity.set_prefs(map_sf=Quantity.map_sf_to_greek, prec=2)
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.ticker import FuncFormatter, NullFormatter
from docopt import docopt
from appdirs import user_cache_dir, user_data_dir
from shlib import mkdir
import arrow
import json
import requests
import re
import json

# stop matplotlib from issuing spurious warnings
import warnings
warnings.filterwarnings("ignore")

# Currency class {{{1
class Currency:
    API_URL = 'https://min-api.cryptocompare.com/data/v2/histoday?fsym={sym}&tsym=USD&allData=true&api_key={api_key}'
    api_key = 'e895762a03fb91c4c6118605c56c9096443c7648347e87b65eedc680c059e90b'

    # currencies() {{{2
    @staticmethod
    def currencies():
        for cls in sorted(Currency.__subclasses__(), key=lambda c: c.INCEPTION_DATE):
            if cls.SHOW:
                yield cls

    # download_data() {{{2
    @classmethod
    def download_data(cls):
        # this version downloads a json version of the data, it should be robust
        display('updating', cls.CURRENCY)
        now = arrow.now().format('YYYY-MM-DD')
        url = cls.API_URL.format( sym=cls.SYMBOL, api_key=cls.api_key)
        narrate(f'Accessing {cls.CURRENCY} using {url}')
        try:
            r = requests.get(url)
            data = r.json()
            cls.data = data['Data']['Data']
            cls.today = now
            return
        except requests.exceptions.TooManyRedirects as e:
            reason = 'too many redirects.'
        except requests.exceptions.HTTPError as e:
            reason = invalid_response(response.text, 'invalid response.')
        except (
            requests.exceptions.ConnectionError,
            requests.exceptions.RequestException
        ) as e:
            if 'certificate_verify_failed' in str(e).lower():
                reason = 'certificate error, consider using --insecure option.'
            else:
                reason = 'connection error.'
        raise Error(reason, codicil=str(e), culprit=url)

    # write_data() {{{2
    @classmethod
    def write_data(cls):
        try:
            contents = dict(date=cls.today, data=cls.data)
            to_output = json.dumps(contents, indent=2)
            cache_dir = Path(user_cache_dir(), 'cryptocurrency')
            mkdir(cache_dir)
            out_file = Path(cache_dir, cls.CURRENCY + '.json')
            out_file.write_text(to_output)
        except OSError as e:
            raise Error(os_error(e))

    # read_data() {{{2
    @classmethod
    def read_data(cls):
        try:
            cache_dir = Path(user_cache_dir(), 'cryptocurrency')
            in_file = Path(cache_dir, cls.CURRENCY + '.json')
            if not in_file.exists():
                return False
            narrate(f'reading cache: {in_file!s}')
            loaded_text = in_file.read_text()
            loaded_data = json.loads(loaded_text)
            cls.today = loaded_data['date']
            cls.data = loaded_data['data']
            now = arrow.now().format('YYYY-MM-DD')
            return cls.today == now
        except OSError as e:
            raise Error(os_error(e))
        except json.JSONDecodeError as e:
            raise Error(e)

    # add_trace() {{{2
    @classmethod
    def add_trace(cls, axis, choice, bounds, normalize, regress):
        # process the data
        dates = []
        values = []
        if choice == 'holdings':
            scale = cls.HOLDINGS
            if not scale:
                error('no holdings.', cls.SYMBOL)
                return
            choice = 'close'
        else:
            scale = 1

        most_recent = Quantity(cls.data[-1][choice], '$')
        if normalize:
            scale = 1/most_recent

        for data in cls.data:
            try:
                v = scale*float(data[choice])
                d = arrow.get(data['time'])
                if not v:
                    continue
                if not bounds.update(d, v):
                    continue
                values.append(v)
                dates.append(d)
            except ValueError:
                pass

        trace, = axis.plot_date(
            dates, values, color=cls.COLOR, linestyle='-', marker=None
        )
        #trace.set_label(f'{cls.SYMBOL} ({most_recent:#,.2p})')
        trace.set_label(f'{cls.SYMBOL} ({most_recent})')
        axis.text(
            dates[-1], values[-1], cls.SYMBOL,
            verticalalignment='top', horizontalalignment='right',
            color=cls.COLOR, fontsize=12
        )

        if regress:
            (ar, br) = np.polyfit(
                [d.toordinal() for d in dates],
                np.log(values),
                1
            )
            interval = [dates[0], dates[-1]]
            r_values = np.exp(
                np.polyval([ar, br], [d.toordinal() for d in interval])
            )
            growth = Quantity(100*np.exp(366*ar), '%/year')  # 366 days per year
            years = Quantity((dates[-1] - dates[0]).days/366, 'years')
            print(f'{cls.SYMBOL} growth = {growth} over last {years}')
            trace, = axis.plot_date(
                interval, r_values, color=cls.COLOR, linestyle='-.', marker=None
            )


# Currency classes {{{1
# Bitcoin {{{2
class Bitcoin(Currency):
    CURRENCY = 'bitcoin'
    SYMBOL = 'BTC'
    INCEPTION_DATE = '20130428'
    COLOR = 'blue'
    HOLDINGS = 0
    SHOW = True

# Ethereum {{{2
class Ethereum(Currency):
    CURRENCY = 'ethereum'
    SYMBOL = 'ETH'
    INCEPTION_DATE = '20150807'
    COLOR = 'green'
    HOLDINGS = 0
    SHOW = True

# BitcoinCash {{{2
class BitcoinCash(Currency):
    CURRENCY = 'bitcoin-cash'
    SYMBOL = 'BCH'
    INCEPTION_DATE = '20170723'
    COLOR = 'red'
    HOLDINGS = 0
    SHOW = True

# BitcoinGold {{{2
class BitcoinGold(Currency):
    CURRENCY = 'bitcoin-gold'
    SYMBOL = 'BTG'
    INCEPTION_DATE = '20171023'
    COLOR = 'gold'
    HOLDINGS = 0
    SHOW = False

# ZCash {{{2
class ZCash(Currency):
    CURRENCY = 'zcash'
    SYMBOL = 'ZEC'
    INCEPTION_DATE = '20161029'
    COLOR = 'magenta'
    HOLDINGS = 0
    SHOW = True

# Cardano {{{2
class Cardano(Currency):
    CURRENCY = 'cardano'
    SYMBOL = 'ADA'
    INCEPTION_DATE = '20171001'
    COLOR = 'cyan'
    HOLDINGS = 0
    SHOW = True

# Stellar {{{2
class Stellar(Currency):
    CURRENCY = 'stellar'
    SYMBOL = 'XLM'
    INCEPTION_DATE = '20140805'
    COLOR = 'brown'
    SHOW = True

# Eos {{{2
class Eos(Currency):
    CURRENCY = 'eos'
    SYMBOL = 'EOS'
    INCEPTION_DATE = '20170701'
    COLOR = 'gray'
    HOLDINGS = 0
    SHOW = True

# Iota {{{2
class Iota(Currency):
    CURRENCY = 'iota'
    SYMBOL = 'IOT'
    INCEPTION_DATE = '20170613'
    COLOR = 'orange'
    HOLDINGS = 0
    SHOW = True

# Eos Black {{{2
class EosBlack(Currency):
    CURRENCY = 'eosblack'
    SYMBOL = 'BLACK'
    INCEPTION_DATE = '20180907'
    COLOR = 'black'
    HOLDINGS = 0
    SHOW = False

# Bit Shares {{{2
class BitShares(Currency):
    CURRENCY = 'bitshares'
    SYMBOL = 'BTS'
    INCEPTION_DATE = '20140721'
    COLOR = 'magenta'
    SHOW = False

# Neo {{{2
class Neo(Currency):
    CURRENCY = 'neo'
    SYMBOL = 'NEO'
    INCEPTION_DATE = '20160909'
    COLOR = 'pink'
    SHOW = False

# Bounds class {{{1
class Bounds:
    def __init__(self, cmdline):
        self.end = arrow.now()
        if cmdline['--year']:
            self.start = self.end.shift(months=-12)
        elif cmdline['--quarter']:
            self.start = self.end.shift(months=-3)
        elif cmdline['--month']:
            self.start = self.end.shift(months=-1)
        else:
            self.start = self.end.shift(months=-5000)
        self.xmin = self.end
        self.ymin = float('inf')
        self.ymax = -float('inf')

    def update(self, d, v):
        if d < self.start:
            return False
        if d < self.xmin:
            self.xmin = d
        if v and v < self.ymin:
            self.ymin = v
        if v > self.ymax:
            self.ymax = v
        return True

    def apply(self, axis):
        axis.set_xlim(self.xmin, self.end)
        axis.set_ylim(0.9*self.ymin, 1.1*self.ymax)

# main {{{1
with Inform(logfile=f'{user_data_dir()}/cryptocurrency/show-cryptocurrency-history.log'):
    try:
        # get choice on what to show {{{2
        cmdline = docopt(__doc__)
        choice = cmdline['<request>']
        if not choice:
            choice = 'holdings'
            choice = 'close'
        choices = 'open high low close volume cap holdings'.split()
        if choice not in choices:
            raise Error(
                'invalid request, choose from:', ', '.join(choices), culprit=choice
            )
        tokens = cmdline['--tokens']
        if not tokens:
            tokens = 'BTC ETH EOS BCH ZEC'
        tokens = sorted(set(tokens.upper().replace(',', ' ').split()))
        if 'ALL' in tokens:
            tokens = True

        # get interval in months {{{2
        if cmdline['--year']:
            interval = 12
        elif cmdline['--quarter']:
            interval = 3
        elif cmdline['--month']:
            interval = 1
        else:
            interval = 0

        # process normalize option {{{2
        normalize = cmdline['--normalize']
        if choice == 'holdings' and normalize:
            display('Showing normalized prices at close.')
            choice = 'close'
        units = '' if choice == 'volume' or normalize else '$'

        # generate the graph {{{2
        bounds = Bounds(cmdline)
        figure = plt.figure()
        axis = figure.add_subplot(111)
        for currency in Currency.currencies():
            if tokens is True or currency.SYMBOL in tokens:
                if not currency.read_data():
                    currency.download_data()
                    currency.write_data()
                try:
                    currency.add_trace(
                        axis, choice, bounds, normalize, cmdline['--regress']
                    )
                except IndexError:
                    error('not available.', culprit=currency.CURRENCY)
        if bounds.ymax != bounds.ymin:
            bounds.apply(axis)
            axis.set_yscale('log')
            #formatter = FuncFormatter(lambda v, p: Quantity(v, units).fixed(show_commas=True))
            formatter = FuncFormatter(lambda v, p: Quantity(v, units))
            axis.yaxis.set_major_formatter(formatter)
            if bounds.ymax / bounds.ymin > 10:
                axis.yaxis.set_minor_formatter(NullFormatter())
            else:
                axis.yaxis.set_minor_formatter(formatter)
        axis.legend()
        axis.set_title(choice.replace('_', ' '))
        plt.show()
    except Error as e:
        e.report()
    except KeyboardInterrupt:
        pass
    done()
